name: Deploy App to Ubuntu Server

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  build-and-deploy:
    name: Build and Deploy with Docker
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      
      - name: Build Docker Image
        run: |
          docker build -t myapp:latest .

      # # Log in to Docker Hub (or GitHub Container Registry)
      # - name: Log in to Docker Registry
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Build and push Docker images
      # - name: Build and Push Docker Images
      #   run: |
      #     # Build and push frontend image
      #     docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest ./UI
      #     docker push ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest

      #     # Build and push backend image
      #     docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest ./backend
      #     docker push ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest

      # # Deploy Docker containers on the server
      # - name: Deploy to Server
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SERVER_HOST: ${{ secrets.SERVER_HOST }}
      #     SERVER_USER: ${{ secrets.SERVER_USER }}
      #   run: |
      #     # Create the SSH directory
      #     sudo mkdir -p ~/.ssh
      #     sudo chmod 700 ~/.ssh

      #     # Add the server key to known hosts
      #     ssh-keyscan -H $SERVER_HOST | sudo tee -a ~/.ssh/known_hosts

      #     # Add the private key
      #     echo "$SSH_PRIVATE_KEY" | sudo tee ~/.ssh/private_key > /dev/null
      #     sudo chmod 600 ~/.ssh/private_key

      #     # Deploy using SSH
      #     ssh -i ~/.ssh/private_key $SERVER_USER@$SERVER_HOST << 'EOF'
      #     # Pull Docker images
      #     docker pull ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest
      #     docker pull ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest

      #     # Create and start containers with Docker Compose
      #     echo "
      #     version: '3.8'
      #     services:
      #       frontend:
      #         image: ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest
      #         ports:
      #           - '80:80'
      #         restart: always

      #       backend:
      #         image: ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest
      #         ports:
      #           - '3000:3000'
      #         restart: always
      #     " > docker-compose.yml

      #     docker-compose up -d
      #     EOF
