/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { CacheFirst } from "workbox-strategies";
import desktopIcon from "../../public/icons/icon-192x192.png";
const server = import.meta.env.VITE_BACKEND_HOST as string;

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching.

precacheAndRoute(self.__WB_MANIFEST);

registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.endsWith(".png") ||
      url.pathname.endsWith(".jpg") ||
      url.pathname.endsWith(".svg")),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

//TODO: Push notification.
self.addEventListener("push", (event) => {
  const data = event.data ? JSON.parse(event.data.text()) : {};

  const options = {
    body: data.body || "No detail provided",
    icon: data.icon || desktopIcon,
    actions: data.actions || [],
    tag: data.tag || "general-notification",
  };

  // Display the notification
  event.waitUntil(
    self.registration.showNotification(data.title || "Notification", options)
  );
});

//To listen for change and unsubscribe, if user changes previous permission
self.addEventListener(
  "pushsubscriptionchange",
  (event: any) => {
    self.registration.pushManager.permissionState().then((state) => {
      if (state == "denied") {
        //user denied access. Attempt to unsubscribe the user at the backend
        self.registration.pushManager.getSubscription().then((subscription) => {
          subscription?.unsubscribe().then((_successful) => {
            fetch(`${server}/api/v1/notifications/unsubscribe`, {
              method: "post",
              headers: {
                "Content-type": "application/json",
              },
              body: JSON.stringify({
                endpoint: subscription.endpoint,
              }),
            });
          });
        });
      } else {
        //renewsubscription. May have expired but not denied
        const subscription = self.registration.pushManager
          .subscribe(event.oldSubscription.options)
          .then((subscription) =>
            fetch(`${server}/api/v1/notifications/renew-subscription`, {
              method: "post",
              headers: {
                "Content-type": "application/json",
              },
              body: JSON.stringify(subscription),
            })
          );
        event.waitUntil(subscription);
      }
    });
  },
  false
);

// Any other custom service worker logic can go here.
